name: 视频AI粗剪

on:
  issues:
    types: [labeled]
  workflow_dispatch:  # 添加手动触发选项

jobs:
  analyze:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'in-progress') && contains(github.event.issue.labels.*.name, 'video-analysis')

    steps:
      - name: 检出代码
        uses: actions/checkout@v2

      - name: 输出调试信息 - 事件上下文
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event type: ${{ github.event.action }}"
          echo "Issue number: ${{ github.event.issue.number }}"

      - name: 获取 Gist 内容
        uses: actions/github-script@v5
        id: get_gist
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Fetching issue comments");
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const gistUrlPattern = /gist.github.com\/([\w\d]+)/;
            let gistContent = '';
            for (const comment of comments) {
              console.log(`Processing comment: ${comment.body}`);
              const match = comment.body.match(gistUrlPattern);
              if (match) {
                const gistId = match[1];
                console.log(`Found Gist ID: ${gistId}`);
                const { data: gist } = await github.rest.gists.get({
                  gist_id: gistId
                });
                gistContent = gist.files['transcription.txt'].content;
                break;
              }
            }
            if (!gistContent) {
              throw new Error('Gist content not found');
            }
            return { result: gistContent };

      - name: 设置 Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: 调用 GLM-4-plus 分析
        id: analyze_gist
        run: |
          pip install zhipuai
          python - << 'EOL'
          from zhipuai import ZhipuAI
          client = ZhipuAI(api_key="${{ secrets.ZHIPU_AI_API_KEY }}")
          system_prompt = "你是一位视频分析专家。分析以下转录文本，提取出重要事件、时间戳和简要描述。每段的时间不要长于8分钟，并且给每段是视频起3个吸引眼球适合哔哩哔哩的视频标题。"
          response = client.chat.completions.create(
              model="glm-4-plus",
              messages=[
                  {"role": "system", "content": system_prompt},
                  {"role": "user", "content": "${{ steps.get_gist.outputs.result }}"}
              ]
          )
          analysis_result = response['choices'][0]['message']['content']
          print(f"::set-output name=analysis_result::{analysis_result}")
          EOL

      - name: 添加分析结果到 Issue 评论
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const analysisResult = `\n\n**视频分析结果**:\n${{ steps.analyze_gist.outputs.analysis_result }}`;
            console.log(`Analysis result: ${analysisResult}`);
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysisResult
            });

      - name: 更新 Issue 标签
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const { owner, repo } = context.repo;
            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber
            });
            console.log(`Current labels: ${issue.labels.map(label => label.name).join(', ')}`);
            const newLabels = issue.labels
              .map(label => label.name)
              .filter(name => name !== 'in-progress')
              .concat('done');
            console.log(`New labels: ${newLabels.join(', ')}`);
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: issueNumber,
              labels: newLabels
            });
