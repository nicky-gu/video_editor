name: 视频AI粗剪

on:
  issues:
    types: [labeled]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'in-progress') && contains(github.event.issue.labels.*.name, 'video-analysis')

    steps:
      - name: 检出代码
        uses: actions/checkout@v2

      - name: 输出调试信息 - 事件上下文
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Issue number: ${{ github.event.issue.number }}"

      - name: 获取 Gist 内容
        uses: actions/github-script@v5
        id: get_gist
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            console.log("Fetching issue comments");
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const gistUrlPattern = /gist\.github\.com\/[\w-]+\/([\da-f]+)/;
            let gistContent = '';
            for (const comment of comments) {
              console.log(`Processing comment: ${comment.body}`);
              const match = comment.body.match(gistUrlPattern);
              if (match) {
                const gistId = match[1];
                console.log(`Found Gist ID: ${gistId}`);
                const { data: gist } = await github.rest.gists.get({
                  gist_id: gistId
                });
                gistContent = gist.files['transcription.txt']?.content || '';
                break;
              }
            }
            if (!gistContent) {
              throw new Error('Gist content not found');
            }
            return { result: gistContent };

      - name: 设置 Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          pip install --upgrade zhipuai

      - name: 调用 GLM-4-plus 分析
        id: analyze_gist
        run: |
          python - << 'EOL'
          import os
          from zhipuai import ZhipuAI

          # 确保 API 密钥正确设置
          client = ZhipuAI(api_key="${{ secrets.ZHIPU_AI_API_KEY }}")

          system_prompt = "你是一位视频分析专家。分析以下转录文本，提取出重要事件、时间戳和简要描述。每段的时间不要超过8分钟，并且需要配上2个适合bilibili视频的标题要求足够吸引眼球。一定不能遗漏时间戳。"

          user_content = """${{ steps.get_gist.outputs.result }}"""

          response = client.chat.completions.create(
              model="glm-4-plus",
              messages=[
                  {"role": "system", "content": system_prompt},
                  {"role": "user", "content": user_content}
              ]
          )

          # 确保 response.choices 是一个列表并且有内容
          if not response.choices:
              raise ValueError("No choices found in the response.")

          # 访问 message 的 content 属性
          analysis_result = response.choices[0].message.content

          # 使用环境文件传递输出
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              env_file.write(f"ANALYSIS_RESULT={analysis_result}\n")
          EOL

      - name: 添加分析结果到 Issue 评论
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const analysisResult = process.env.ANALYSIS_RESULT;
            console.log(`Analysis result: ${analysisResult}`);
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**视频分析结果**:\n${analysisResult}`
            });

      - name: 更新 Issue 标签
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const { owner, repo } = context.repo;
            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber
            });
            console.log(`Current labels: ${issue.labels.map(label => label.name).join(', ')}`);
            const newLabels = issue.labels
              .map(label => label.name)
              .filter(name => name !== 'in-progress')
              .concat('done');
            console.log(`New labels: ${newLabels.join(', ')}`);
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: issueNumber,
              labels: newLabels
            });
