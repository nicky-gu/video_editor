name: 视频AI粗剪

on:
  issues:
    types: [labeled]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'in-progress') && contains(github.event.issue.labels.*.name, 'video-analysis')

    permissions:
      issues: write
      pull-requests: write


    steps:
      - name: 检出代码
        uses: actions/checkout@v2

      - name: 获取 Gist 内容
        uses: actions/github-script@v5
        id: get_gist
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const gistUrlPattern = /gist\.github\.com\/[\w-]+\/([\da-f]+)/;
            let gistContent = '';
            for (const comment of comments) {
              const match = comment.body.match(gistUrlPattern);
              if (match) {
                const gistId = match[1];
                const { data: gist } = await github.rest.gists.get({
                  gist_id: gistId
                });
                gistContent = gist.files['transcription.txt']?.content || '';
                break;
              }
            }
            if (!gistContent) {
              throw new Error('Gist content not found');
            }
            return { result: gistContent };

      - name: 设置 Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          pip install --upgrade zhipuai

      - name: 调用 GLM-4-flash 分析
        id: analyze_gist
        run: |
          python - << 'EOL'
          import os
          from zhipuai import ZhipuAI
          client = ZhipuAI(api_key="${{ secrets.ZHIPU_AI_API_KEY }}")
          system_prompt = "你是一位视频分析专家。分析以下转录文本，提取出重要事件、时间戳和详细描述。每段的时间不要超过8分钟，并且需要配上2个适合bilibili视频的标题要求足够吸引眼球。一定不能遗漏时间戳和标题！！。如果内容是主播互动，请详细总结互动的具体内容"
          user_content = """${{ steps.get_gist.outputs.result }}"""
          response = client.chat.completions.create(
              model="glm-4-flash",
              messages=[
                  {"role": "system", "content": system_prompt},
                  {"role": "user", "content": user_content}
              ]
          )
          if not response.choices:
              raise ValueError("No choices found in the response.")
          analysis_result = response.choices[0].message.content
          with open("analysis_result.txt", "w") as file:
              file.write(analysis_result)
          EOL

      - name: 创建 Gist 以保存分析结果
        uses: actions/github-script@v5
        id: create_gist
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('analysis_result.txt', 'utf8');
            const { data: gist } = await github.rest.gists.create({
              files: {
                'analysis_result.txt': {
                  content: content
                }
              },
              public: false,
              description: '视频分析结果'
            });
            core.setOutput('gistUrl', gist.html_url);

      - name: 添加 Gist 链接到 Issue 评论
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const gistUrl = '${{ steps.create_gist.outputs.gistUrl }}';
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**视频分析结果已上传到 Gist**:\n[查看分析结果](${gistUrl})`
            });

      - name: 更新 Issue 标签
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const { owner, repo } = context.repo;
            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber
            });
            const newLabels = issue.labels
              .map(label => label.name)
              .filter(name => name !== 'in-progress')
              .concat('done');
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: issueNumber,
              labels: newLabels
            });

      - name: 获取更新后的 Issue 信息和评论
        id: updated_issue_details
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number
            });
            console.log('Issue Data:', issue);
            const issueUrl = issue.html_url;
            const issueBody = issue.body || "未提供内容";
            console.log('Issue URL:', issueUrl);
            console.log('Issue Body:', issueBody);
            core.setOutput('issueUrl', issueUrl);
            core.setOutput('issueBody', issueBody);

      - name: 调试输出 Issue 信息
        run: |
          echo "Issue URL: ${{ steps.updated_issue_details.outputs.issueUrl }}"
          echo "Issue Body: ${{ steps.updated_issue_details.outputs.issueBody }}"

      - name: 通知任务成功
        run: |
          echo "视频AI粗剪任务成功"
          curl -X POST -H "Content-Type: application/json" -d @- ${{ secrets.FEISHU_WEBHOOK }} <<EOF
          {
            "msg_type": "text",
            "content": {
              "text": "视频AI粗剪任务成功\nIssue URL: ${{ steps.updated_issue_details.outputs.issueUrl }}\n${{ steps.updated_issue_details.outputs.issueBody }}"
            }
          }
          EOF
