name: Deploy to Cloudflare Worker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Wrangler
        run: npm install -g wrangler

      # 创建 Worker 项目结构
      - name: Create Worker structure
        run: |
          # 创建 worker 目录
          mkdir -p worker
          
          # 创建 package.json
          cat > worker/package.json << 'EOF'
          {
            "name": "video-analyzer-api",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "itty-router": "^4.0.0"
            }
          }
          EOF
          
          # 创建 Worker 代码
          cat > worker/index.js << 'EOF'
          import { Router } from 'itty-router';

          const router = Router();
          
          // 中间件：验证 API 密钥
          const authMiddleware = async (request, env) => {
            const apiKey = request.headers.get('X-API-Key');
            if (apiKey !== env.API_KEY) {
              return new Response('Unauthorized', { status: 401 });
            }
          };
          
          // 创建分析任务
          router.post('/analyze', async (request, env) => {
            try {
              const { url, webhook_url } = await request.json();
              
              const response = await fetch(`https://api.github.com/repos/${env.GITHUB_REPOSITORY}/issues`, {
                method: 'POST',
                headers: {
                  'Authorization': `token ${env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json',
                },
                body: JSON.stringify({
                  title: `Video Analysis Task: ${url}`,
                  body: JSON.stringify({
                    video_url: url,
                    webhook_url: webhook_url,
                    status: 'pending',
                    progress: 0,
                    created_at: new Date().toISOString()
                  }),
                  labels: ['video-analysis', 'pending']
                })
              });
          
              const issue = await response.json();
              
              return new Response(JSON.stringify({
                task_id: issue.number,
                status: 'pending',
                message: 'Task created successfully'
              }), {
                headers: { 'Content-Type': 'application/json' }
              });
              
            } catch (error) {
              return new Response(JSON.stringify({ error: error.message }), {
                status: 500,
                headers: { 'Content-Type': 'application/json' }
              });
            }
          });
          
          // 获取任务状态
          router.get('/status/:taskId', async (request, env) => {
            try {
              const { taskId } = request.params;
              
              const response = await fetch(
                `https://api.github.com/repos/${env.GITHUB_REPOSITORY}/issues/${taskId}`,
                {
                  headers: {
                    'Authorization': `token ${env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json',
                  }
                }
              );
          
              const issue = await response.json();
              const data = JSON.parse(issue.body);
              
              return new Response(JSON.stringify({
                task_id: taskId,
                status: data.status,
                progress: data.progress,
                result: data.result,
                error: data.error
              }), {
                headers: { 'Content-Type': 'application/json' }
              });
              
            } catch (error) {
              return new Response(JSON.stringify({ error: 'Task not found' }), {
                status: 404,
                headers: { 'Content-Type': 'application/json' }
              });
            }
          });
          
          // 404 处理
          router.all('*', () => new Response('Not Found', { status: 404 }));
          
          export default {
            fetch: router.handle
          };
          EOF
          
          # 创建 wrangler.toml
          cat > worker/wrangler.toml << EOF
          name = "video-analyzer-api"
          main = "index.js"
          compatibility_date = "2024-01-01"
          
          [vars]
          GITHUB_REPOSITORY = "${{ github.repository }}"
          EOF

      # 安装依赖
      - name: Install dependencies
        run: |
          cd worker
          npm install

      # 部署到 Cloudflare Worker
      - name: Deploy to Cloudflare Worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          cd worker
          # 设置 secrets
          wrangler secret put GITHUB_TOKEN --value "${{ secrets.GITHUB_TOKEN }}"
          wrangler secret put API_KEY --value "${{ secrets.API_KEY }}"
          # 部署
          wrangler deploy

</rewritten_file> 